'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	fs=require('fs');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.ping=qtools.ping;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'fileName',
				optional: false
			},
			{	name:'outputSpec',
				optional:true
			},
			{
				name:'config',
				optional:false
			}
		]
	});



	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};
		
	//LOCAL FUNCTIONS ====================================
	
	var stripHeaderRow=function(inData){
		var tmp=inData.split(self.lineEnding);

		delete tmp[0];
		return tmp.join('');
	}

	//METHODS AND PROPERTIES ====================================
	
	self.alreadyKeptOne=false;
	
	this.lineEnding=this.config.lineEnding?this.config.lineEnding:'\n';
	
	this.dataBuffer='';

	this.stash=function(data, fileWriteCallback){
	
		var parentPath=qtools.getSurePath(self.outputSpec || {}, "context.parentPath"),
			header=qtools.getSurePath(self.outputSpec || {}, "control.header"),
			append=qtools.getSurePath(self.outputSpec || {}, "control.append");
			parentPath=parentPath?parentPath:'';
			append=qtools.strToBool(append);
			header=qtools.strToBool(header);

			if (self.alreadyKeptOne){
				data=stripHeaderRow(data);
			}
			else{
				self.alreadyKeptOne=true;
			}
	
		self.dataBuffer+=data;

			fileWriteCallback('', {status:1});

	}
	
	this.getData=function(){
		return self.dataBuffer;
	}
	
	this.putData=function(inData){
		self.dataBuffer=inData;
	}

	//INITIALIZATION ====================================

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;
