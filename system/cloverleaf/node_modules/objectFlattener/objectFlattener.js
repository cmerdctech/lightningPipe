'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	fs = require('fs');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'source',
				optional: false
			},
			{
				name: 'destination',
				optional: false
			},
			{
				name: 'usablePayloadDottedPath',
				optional: true
			},
			{
				name: 'callback',
				optional: false
			},
			{
				name: 'switches',
				optional: true
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});

		};

	this.switches = this.switches ? this.switches : {};

	//LOCAL FUNCTIONS ====================================

	var flatten = function(inData, flatSpecs) {
		var dottedPathList,
			outString = '';
			
			flatSpecs=flatSpecs?flatSpecs:{};
			
			if (flatSpecs.fieldList){
			dottedPathList = flatSpecs.fieldList;
			}
			else{
			dottedPathList = qtools.extractDottedPaths(inData[0]);
			}
			
		if (self.switches.header || flatSpecs.includeHeaderRow) {
			for (var i = 0, len = dottedPathList.length; i < len; i++) {
				element = dottedPathList[i];
				outString += element + '\t';
			}
			outString += '\n';
		}

		for (var i = 0, len = inData.length; i < len; i++) {
			var element = inData[i];

			for (var j = 0, len2 = dottedPathList.length; j < len2; j++) {
				var path = dottedPathList[j],
					value = qtools.getSurePath(inData[i], path);
				outString += value + '\t';
			}
			outString += '\n';

		}



		return outString;
	}

	var writeCallback = function(err, result) {
		if (err) {
			self.callback({
				message: 'failed to write data',
				evidence: err
			})
		} else {
			self.callback('', result);
		}
	}

	var receiveData = function(err, result) {
		if (err) {
			self.callback({
				message: 'failed to receive data',
				evidence: err
			})
		} else {
			//	var data=result.Data.Address_Contact;
			if (self.usablePayloadDottedPath) {
				var data = qtools.getSurePath(result, self.usablePayloadDottedPath);
			} else {
				var data = result;
			}

			if (qtools.toType(data) != 'array') {
		
				var evidence;
				if (global.localEnvironment.testServer) {
					evidence={
						dataType: qtools.toType(data),
						badObject: JSON.stringify(data)
					}
				}
				else{
					{
						dataType: qtools.toType(data)
					}
				}

				self.callback({
					message: 'incoming data is not an array',
					evidence: evidence
				})
			} else {
				self.destination.takeItAway(flatten(data, result.FlatSpecs), writeCallback);
			}
		}
	}


	//METHODS AND PROPERTIES ====================================


	this.doIt = function() {

		this.source.giveMeTheGoods(receiveData);
		
	}
	//INITIALIZATION ====================================

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;




