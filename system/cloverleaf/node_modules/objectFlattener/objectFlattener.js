'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	fs = require('fs');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'source',
				optional: false
			},
			{
				name: 'destination',
				optional: false
			},
			{
				name: 'callback',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});

		};

	//LOCAL FUNCTIONS ====================================

	var flatten = function(inData) {
		return JSON.stringify(inData);
	}
	
	var writeCallback=function(err, result){
		if (err){
			self.callback({message:'failed to write data', evidence:err})
		}
		else{
			self.callback('', result);
		}
	}
	
	var receiveData = function(err, result) {
		if (err){
			self.callback({message:'failed to receive data', evidence:err})
		}
		else{
			self.destination.takeItAway(flatten(result), writeCallback);
		}
	}


	//METHODS AND PROPERTIES ====================================

	
	this.doIt=function(){
	
	this.source.giveMeTheGoods(receiveData);
	}
	//INITIALIZATION ====================================





	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;

