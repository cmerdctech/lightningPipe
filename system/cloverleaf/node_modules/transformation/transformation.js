'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{	name:'transformSpecs',
				optional:true
			},
			{	name:'config',
				optional:false
			},
			{
				name:'dataBufferList',
				optional:false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================



	//METHODS AND PROPERTIES ====================================

	this.getBufferList=function(){
		return self.changedDataList;
	}


	//INITIALIZATION ====================================

	this.transformList=[];
	
	self.changedDataList=this.dataBufferList;
	
	for (var i=0, len=this.transformSpecs.length; i<len; i++){
		var element=this.transformSpecs[i],
			transformName=element.type,
			parameters=element.parameters?element.parameters:{};
			parameters.callback=function(err, result){ console.log('writing from transformation.js, this should execute the next process instead of logging');}
			
			var generator=require(transformName),
 			transformer=new generator(parameters);
 			transformer.executeChange(self.changedDataList, self.dataBufferList);
 			self.changedDataList=transformer.getResult();
	}



	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;






