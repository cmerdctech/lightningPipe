'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

		qtools.validateProperties({
			subject: args || {},
			targetScope: this, //will add listed items to targetScope
			propList: [
				{
					name: 'input',
					optional: false
				},
				{
					name: 'process',
					optional: false
				},
				{
					name: 'export',
					optional: false
				},
			]
		});

	qtools.dump({
		'=-=== args =====': args
	});


	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};
	var handleError = function(err) {
		if (err) {
			//	console.trace();
			throw (err);
		}
	}
	var showTables = function() {
		db.all("SELECT name FROM sqlite_master WHERE type='table';", function(err, result) {
			if (err) {
				console.log('show tables err=' + err + '\n');
			}
			qtools.dump({
				'=-=== tableList =====': result
			});
		});
	}

	var describeTable = function(tableName) {
		db.all("PRAGMA table_info([" + tableName + "]);", function(err, result) {
			if (err) {
				console.log('show tables err=' + err + '\n');
			}
			qtools.dump({
				'=-=== fieldList =====': result
			});
		});

	}

	var showQuery = function(query) {
		db.all(query, function(err, result) {
			if (err) {
				console.log('show tables err=' + err + '\n');
			}
			qtools.dump({
				'=-=== fieldList =====': result
			});
		});

	}

	var genCreateTableString = function(tableName, fieldList) {
		var fieldDefString = '',
			outString,
			existingFieldList=[];


		for (var i = 0, len = fieldList.length; i < len; i++) {
			var element = fieldList[i];
			
			if (existingFieldList.indexOf(element.toLowerCase().trim())>-1){
					global.localEnvironment.log.debug({
						source:'sqlizer',
						type:'duplicate field name in table was replaced with: badField' + i,
						evidence:{
							badFieldName:element,
							tableName:tableName
						}
					});
					
					element='badField' + i;
				}
			existingFieldList.push(fieldList[i].toLowerCase());

			if (element.match(/\w/)) {
				fieldDefString += '"'+element+'"' + ' TEXT, ';
			} else {

				fieldDefString += 'placeHolder' + i + ' TEXT, ';
			}


		}


		fieldDefString = fieldDefString.replace(/, $/, '');
		outString = "CREATE TABLE " + tableName + " (" + fieldDefString + ")";
		return outString;
	}

	var loadTable = function(tableName, recList) {
		var qList = '';
		for (var i = 0, len = recList[0].split('\t').length; i < len; i++) {
			qList += '?, ';
		}
		qList = qList.replace(/, $/, '');
		var stmt = db.prepare("INSERT INTO " + tableName + " VALUES (" + qList + ")");


		for (var i = 0, len = recList.length; i < len; i++) {
			var element = recList[i].split('\t');
			stmt.run(element);
		}

	}


	var initializeTables = function() {

		db.serialize();
		for (var tableName in self.bufferSet) {


			var buffer = self.bufferSet[tableName],
				bufferData = buffer.getObject(),
				createTableString = genCreateTableString(tableName, bufferData.fieldList);

			db.run(createTableString, function(err, result) {
				handleError(err);
				//no result for createTable);
			});
		}
		showTables();
		db.parallelize();
		for (var tableName in self.bufferSet) {

			var buffer = self.bufferSet[tableName],
				bufferData = buffer.getObject(),
				createTableString = genCreateTableString(tableName, bufferData.fieldList);

			loadTable(tableName, bufferData.data);
		}
		db.serialize();
	}

	var executeProcesses = function() {

	for (var i=0, len=self.process.length; i<len; i++){
		var processItem=self.process[i],
			processSql=processItem.query;
		db.run(processSql);
	}



	}
	//LOCAL FUNCTIONS ====================================

	this.executeChange = function(inData) {
		self.bufferSet = qtools.clone(inData);

		initializeTables();

		executeProcesses();
		showTables();
	}

	this.getResult = function() {
		return self.result;
	}

	//METHODS AND PROPERTIES ====================================
	var sqlite3 = require('sqlite3').verbose();
	var db = new sqlite3.Database(':memory:');
	console.log('sqlite is here');
	db.serialize(function() {
		db.run("CREATE TABLE lorem (info TEXT)");

		var stmt = db.prepare("INSERT INTO lorem VALUES (?)");
		for (var i = 0; i < 10; i++) {
			stmt.run("Ipsum " + i);
		}
		stmt.finalize();

		db.each("SELECT rowid AS id, info FROM lorem", function(err, row) {
			console.log(row.id + ": " + row.info);
		});

	});

	//db.close();


	//INITIALIZATION ====================================


	self.result = {};


	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;








