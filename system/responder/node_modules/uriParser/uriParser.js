'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'apiVersion',
				optional: false
			},
			{
				name: 'apiName',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================

	var extractFields = function(inString) {
		return inString.replace(/\/$/, '').split('/');
	}

	//PARSERS ====================================


	this.parsers = {};
	this.parsers.uff = {};

	this.parsers.uff['1.0'] = function(inString) {
	
		self.validSegmentNames = ['districts', 'schools', 'segments'];

		var queryInfo = [];
		var list = extractFields(inString);
		for (var i = 0, len = list.length; i < len; i = i + 2) {
			var operand = list[i + 1];

			queryInfo.push({
				name: list[i],
				value: operand ? operand : 'list'
			});

			if (!operand) {
				break;
			}

		}
		this.queryInfo = queryInfo;
		return queryInfo;

	}


	//METHODS AND PROPERTIES ====================================

	this.getVersion = function() {
		return self.apiVersion;
	};
	this.getName = function() {
		return self.apiName;
	};
	this.getApi = function() {
		return {
			apiName: self.apiName,
			apiVersion: self.apiVersion
		};
	};

	this.getValidSegmentNames = function() {
		return self.validSegmentNames;
	}

	this.parse = self.parsers[self.apiName][self.apiVersion];
	
	


	this.checkQuery = function(callback) {
		var newQuery=self.queryInfo;
		for (var i = 0, len = newQuery.length; i < len; i++) {
			var element = newQuery[i].name;

			if (self.validSegmentNames.indexOf(element) == -1) {
				if (typeof (outList) == 'undefined') {
					var outList = [];
				}
				outList.push(element);
			}

		}
		if (typeof (outList) == 'undefined') {
			callback('', {});
		} else {
			callback({data:{message:'Bad segment(s) in URI', evidence:outList}, meta:qtools.getMetaData()}, '');
		}
	}

	//INITIALIZATION ====================================



	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;
