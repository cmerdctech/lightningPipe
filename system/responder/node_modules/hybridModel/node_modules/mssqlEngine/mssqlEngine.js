'use strict';
var qtools = require('qtools'),
  qtools = new qtools(module),
  events = require('events'),
  util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
  events.EventEmitter.call(this);
  this.forceEvent = forceEvent;
  this.args = args;
  this.metaData = {};
  this.addMeta = function(name, data) {
    this.metaData[name] = data;
  }

  // 	qtools.validateProperties({
  // 		subject: args,
  // 		targetScope: this, //will add listed items to targetScope
  // 		propList: [
  // 			{
  // 				name: 'placeholder',
  // 				optional: true
  // 			}
  // 		]
  // 	});

  var self = this,
    forceEvent = function(eventName, outData) {
      this.emit(eventName, {
        eventName: eventName,
        data: outData
      });
    };


  //LOCAL FUNCTIONS ====================================



  //METHODS AND PROPERTIES ====================================



  //INITIALIZATION ====================================

  this.executeQuery = function(callback) {

    var sql = require('mssql');

    var config = {
      user: 'vpnextractor',
      password: 'cm3rdc02',
      server: 'etl-test.erdc.k12.mn.us', // You can use 'localhost\\instance' to connect to named instance
      database: 'SSI_XDI_Albany',

      //     options: {
      //         encrypt: true // Use this if you're on Windows Azure
      //     }
    }


    sql.connect(config, function(err) {
      // ... error checks

      // Query  

      if (err) {
        console.dir({
          '===== err =====': err
        });
      }
      ;

      var request = new sql.Request();
      console.log('generated mssql request');

      var query;
      query = 'select top 10 * from jmc.JmcStudentBase left join';
      query = "select top 1 sb.FullName as student, se.entryDate, se.schoolCode from jmc.jmcStudentBase as sb left join ext.StudentEnrollment as se on se.StateStudentIdentifier=sb.StateStudentIdentifier";

      request.query(query, function(err, recordset) {
        // ... error checks

        callback(recordset);
      });

      // Stored Procedure

      //     var request = new sql.Request();
      //     request.input('input_parameter', sql.Int, value);
      //     request.output('output_parameter', sql.VarChar(50));
      //     request.execute('procedure_name', function(err, recordsets, returnValue) {
      //         // ... error checks
      // 
      //         console.dir(recordsets);
      //     });

    });
  }


  return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;







