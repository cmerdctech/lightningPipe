'use strict';
var qtools = require('qtools');
qtools = new qtools(this);

//source file schemata
var Address_Contact_File_FieldList = ["districtCode", "districtType", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "staffUniqueIdentifier", "schoolCode", "addressTypeCode", "address1", "address2", "address3", "city", "stateName", "stateCode", "zipCode", "countyCode", "countyName", "contactCode", "contactLegalCode", "contactExtraMailingCode", "contactSequence", "contactfirstName", "contactmiddleName", "contactlastName", "contactfullName", "contactphone1", "contactphone2", "contactphone3", "phone1Type", "phone2Type", "phone3Type", "contactemail"];
var Course_File_FieldList = ["districtCode", "districtType", "schoolCode", "courseNumber", "schoolYearBegin", "schoolYearEnd", "courseDesc", "courseAbbreviation", "subjectAreaDepartment", "credit", "gradeLevelMinimum", "gradeLevelMaximum"];
var User_Base_File_FieldList = ["districtCode", "Filler2", "staffUniqueIdentifier", "schoolYearBegin", "schoolYearEnd", "employeeIdentifier", "localStaffCode", "stateSchoolPlantNumber", "lastName", "middleName", "firstName", "fullName", "jobCode1", "jobCode2", "jobCode3", "jobCode4", "phone", "email", "department1", "department2", "department3", "department4", "Status", "primaryLocaltionFlag", "loginName", "password", "defaultpassword"];
var Lookups_FieldList = ['noFieldDefinitionKnown'];
var Section_File_FieldList = ["districtCode", "districtType", "schoolCode", "sectionNumber", "courseNumber", "termAbbreviation", "schoolYearBegin", "schoolYearEnd", "gradeLevel", "beginDate", "endDate", "location", "homeroomFlag", "beginningPeriodNumber", "endPeriodNumber", "credit", "teamCode", "track"];
var Section_Staff_File_FieldList = ["districtCode", "districtType", "schoolCode", "staffUniqueIdentifier", "localStaffCode", "schoolYearBegin", "schoolYearEnd", "sectionNumber", "courseNumber", "gradeLevel", "primaryInstructorFlag", "lastName", "middleName", "firstName"];
var Section_Student_File_FieldList = ["districtCode", "districtType", "schoolCode", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "schoolYearBegin", "schoolYearEnd", "sectionNumber", "courseNumber", "gradeLevelLevel", "entryDate", "withdrawalDate", "entryType", "withdrawalType"];
var Student_Attendance_File_FieldList = ["districtCode", "districtType", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "schoolYearBegin", "schoolYearEnd", "schoolCode", "attendanceCode", "termAbbreviation", "attendanceCategory", "attendanceDate", "attendanceDays", "attendanceTimeUnit", "periodCode", "timeIn", "timeOut", "note"];
var Student_Base_File_FieldList = ["districtCode", "districtType", "schoolCode", "schoolYearBegin", "schoolYearEnd", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "gradeLevelLevel", "graduationYear", "studentActiveInactiveStatus", "lastName", "middleName", "firstName", "suffix", "prefix", "fullName", "preferredName", "lastSchoolAttended", "concurrentEnrollment", "birthDate", "selfGuardianFlag", "gender", "socialSecurityNumber", "birthPlace", "birthState", "birthCountry", "ethnicityCode"];
var Student_Discipline_File_FieldList = ["districtCode", "districtType", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "schoolYearBegin", "schoolYearEnd", "schoolCode", "disciplineTimeUnit", "termAbbreviation", "disciplineCategory", "disciplineCode", "disciplineDate", "dispositionCode", "dispositionBeginDate", "dispositionendDate", "note"];
var Student_Enrollment_File_FieldList = ["districtCode", "districtType", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "schoolCode", "schoolYearBegin", "schoolYearEnd", "gradeLevelLevel", "entryDate", "withdrawalDate", "entryTypeCode", "withdrawalTypeCode", "studentResidentDistrictCode", "studentResidentSchoolCode", "studentResidentSchoolCode", "stateAidCategory", "lastlocationOfAttendance", "percentEnrolled", "attendanceType", "membershipDays", "postSecondaryOption", "pseoHighSchoolParticipationHrs", "homeboundServiceIndicator", "specialEducationEvaluationStatus", "specialEducationInstructionalSetting", "lep", "lepBeginDate", "giftedTalentedParticipation", "gender", "ethnicityCode", "birthDate", "homeprimaryLanguage", "primaryDisability", "transportationCategory", "economicIndicator", "migrantIndicator", "studentTitle1Indicator", "homelessStudentFlag", "transportingDistrictCode", "transportingDistrictType", "wardOfStateFlag", "independentStudyFlag", "supplementalEducationServices", "specialEnrollmentCode", "primarySchoolFlag", "specialEducationFlag", "504Flag", "track", "teamCode", "promotionStatus", "programofStudy", "enrollmentStatus", "Filler", "Filler ", "Filler", "Filler", "Filler", "Filler", "advisorIdName", "Filler", "ellServiceLevel", "hispanicLatino", "americanIndianAlaskaNative", "asian", "blackAfricanAmerican", "nativeHawaiianPacificIslander", "white", "firstUsSchoolEntryDate", "newToCountryFlag", "Filler ", "nextYearSchool"];
var Student_gpa_File_FieldList = ["districtCode", "districtType", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "creditsEarned", "schoolYearBegin", "schoolYearEnd", "gpa1", "gpa2", "schoolLevelName", "programofStudy"];
var Student_gradeLevels_File_FieldList = ["districtCode", "districtType", "studentUniqueIdentifier", "stateStudentIdentifier", "localStudentIdentifier", "courseCode", "termCode", "subjectAreaDepartment", "gradeLevelLevel", "creditsEarned", "creditsAttempted", "gradeLevelMark", "schoolYearBegin", "schoolYearEnd", "schoolCode", "courseDesc", "sectionNumber", "teacherName"];


//Synthetic file schemata
var Student_Enrolled_File_FieldList = [ "Student_Base.districtCode", "Student_Base.districtType", "Student_Base.schoolCode", "Student_Base.schoolYearBegin", "Student_Base.expr1", "Student_Enrollment.nextYearSchool", "Student_Base.studentUniqueIdentifier", "Student_Base.gender", "Student_Base.stateStudentIdentifier", "Student_Enrollment.gradeLevelLevel", "Student_Base.graduationYear", "Student_Base.studentActiveInactiveStatus", "Student_Base.lastName", "Student_Base.firstName", "Student_Base.middleName", "Address_Contact.address1", "Address_Contact.address2", "Address_Contact.city", "Address_Contact.stateCode", "Address_Contact.zipCode", "Address_Contact.contactphone1", "Address_Contact.contactphone2", "Address_Contact.contactphone3", "Student_Enrollment.studentResidentDistrictCode", "Student_Enrollment.studentResidentSchoolCode", "Student_Base.homeroomTeacher", "Student_Base.counselorIdentifier", "Student_Base.socialSecurityNumber", "Student_Base.ethnicityCode", "Student_Enrollment.homeprimaryLanguage", "Student_Base.primaryLanguage", "Student_Enrollment.stateAidCategory", "Student_Base.lastSchoolAttended", "Student_Base.concurrentEnrollment", "Student_Base.birthDate", "Student_Base.selfGuardianFlag", "Student_Enrollment.wardOfStateFlag", "Student_Enrollment.specialEducationFlag", "Student_Enrollment.specialEducationEvaluationStatus", "Student_Enrollment.specialEducationInstructionalSetting", "Student_Enrollment.primaryDisability", "Student_Enrollment.[504Flag]", "Student_Enrollment.studentTitle1Indicator", "Student_Enrollment.lep", "Student_Enrollment.economicIndicator", "Student_Enrollment.giftedTalentedParticipation", "Student_Enrollment.migrantIndicator", "Student_Enrollment.promotionStatus", "Student_Base.totalYearAbsencesExcused", "Student_Base.totalYearAbsencesUnexcused", "Student_Base.thisYearIss", "Student_Base.thisYearOss", "Student_Base.thisLastYearPromotionStatus", "Student_Base.lastYearAbsencesExplained", "Student_Base.lastYearAbsencesUnexplained", "Student_Base.lastYearIss", "Student_Base.lastYearOss", "Student_Base.gpa", "Student_Base.credits", "Student_Enrollment.programofStudy"];
var Schedule_File_FieldList = [ 	"Section_Student.districtCode", 	"Section_Student.districtType", 	"Section_Student.schoolCode", 	"Section_Student.studentUniqueIdentifier", 	"Section_Staff.staffUniqueIdentifier", 	"Section_Student.courseNumber", 	"Section_Student.sectionNumber", 	"Section.termAbbreviation", 	"Section_Student.schoolYearBegin", 	"Section.beginningPeriodNumber", 	"Section.endPeriodNumber", 	"Course.courseAbbreviation", 	"Course.subjectAreaDepartment"];
var Guardian_File_FieldList = [ "Address_Contact.districtCode", "Address_Contact.districtType", "Address_Contact.studentUniqueIdentifier", "Address_Contact.schoolCode", "Address_Contact.guardianType", "Address_Contact.guardianSequence", "Address_Contact.contactlastName", "Address_Contact.contactfirstName", "Address_Contact.contactmiddleName", "Address_Contact.contactfullName", "Address_Contact.address1", "Address_Contact.address2", "Address_Contact.city", "Address_Contact.stateCode", "Address_Contact.zipCode", "Address_Contact.contactphone1", "Address_Contact.contactphone2", "Address_Contact.contactphone3", "Address_Contact.relationship", "Address_Contact.legalGuardian", "Address_Contact.otherGuardian", "Address_Contact.parentStatus", "Address_Contact.emailAddress"];



var processPassThroughUnchanged = require(__dirname + '/lib/all.passThroughUnchanged.js');

var processForStudents = require(__dirname + '/lib/studentPlansInitial.processForStudents.js');
var processForSchedule = require(__dirname + '/lib/studentPlansInitial.processForSchedule.js');
var processForGuardians = require(__dirname + '/lib/studentPlansInitial.processForGuardians.js');


module.exports = {


	//NOTE: maps property are "sourceFileFieldName":"targetJsonPropertyName". Empty map, {}, emits entire fieldlist.
	//ALSO: translations are executed *after* maps are set. Their format is: "targetJsonPropertyName": function
	//Translations are 1) the only way to use a source field twice, and
	//2) the only way to *create* a field that does not map to a source field
	//return '<!omitProperty!>'; will remove the property entirely

	//[doc1] - MN SIS Extract Files - Unified_V9(In Progress)
	//[doc2] - Plans4.x Import File Formats
	//[doc3] - DWextractLayout

	"Student_Enrolled": {
		componentSchemaList:[
			{
				schemaName: "Student_Base",
				accessInfo: {
					file: {
						fileBaseName: "Student_Base"
					},
					mssql: {
						query: "SELECT  ext.StudentBase.* FROM   (ext.StudentBase         LEFT JOIN ext.AddressContact                ON ext.StudentBase.studentuniqueidentifier =                   ext.AddressContact.studentuniqueidentifier)        LEFT JOIN ext.StudentEnrollment               ON ext.StudentBase.studentuniqueidentifier =                  ext.StudentEnrollment.studentuniqueidentifier WHERE  (           (              ext.StudentEnrollment.entrydate IN (                SELECT Max(entrydate)                FROM ext.StudentEnrollment SE                WHERE ext.StudentEnrollment.studentuniqueidentifier = SE.studentuniqueidentifier              )            )          AND ( ( ext.AddressContact.addresstypecode ) = 'primary1'                 OR ( ext.AddressContact.addresstypecode ) IS NULL )          AND ( ( ext.StudentEnrollment.enrollmentstatus ) = 'a' ) )          and ext.StudentBase.schoolCode='<!schoolCode!>';"
					}
				}
			},
			{
				schemaName: "Address_Contact",
				accessInfo: {
					file: {
						fileBaseName: "Address_Contact"
					},
					mssql: {
						query: "SELECT  ext.AddressContact.* FROM   (ext.StudentBase         LEFT JOIN ext.AddressContact                ON ext.StudentBase.studentuniqueidentifier =                   ext.AddressContact.studentuniqueidentifier)        LEFT JOIN ext.StudentEnrollment               ON ext.StudentBase.studentuniqueidentifier =                  ext.StudentEnrollment.studentuniqueidentifier WHERE  (           (              ext.StudentEnrollment.entrydate IN (                SELECT Max(entrydate)                FROM ext.StudentEnrollment SE                WHERE ext.StudentEnrollment.studentuniqueidentifier = SE.studentuniqueidentifier              )            )          AND ( ( ext.AddressContact.addresstypecode ) = 'primary1'                 OR ( ext.AddressContact.addresstypecode ) IS NULL )          AND ( ( ext.StudentEnrollment.enrollmentstatus ) = 'a' ) )          and ext.StudentBase.schoolCode='<!schoolCode!>';  ext.StudentBase.* FROM   (ext.StudentBase         LEFT JOIN ext.AddressContact                ON ext.StudentBase.studentuniqueidentifier =                   ext.AddressContact.studentuniqueidentifier)        LEFT JOIN ext.StudentEnrollment               ON ext.StudentBase.studentuniqueidentifier =                  ext.StudentEnrollment.studentuniqueidentifier WHERE  (           (              ext.StudentEnrollment.entrydate IN (                SELECT Max(entrydate)                FROM ext.StudentEnrollment SE                WHERE ext.StudentEnrollment.studentuniqueidentifier = SE.studentuniqueidentifier              )            )          AND ( ( ext.AddressContact.addresstypecode ) = 'primary1'                 OR ( ext.AddressContact.addresstypecode ) IS NULL )          AND ( ( ext.StudentEnrollment.enrollmentstatus ) = 'a' ) )          and ext.StudentBase.schoolCode='<!schoolCode!>';"
					}
				}
			},
			{
				schemaName: "Student_Enrollment",
				accessInfo: {
					file: {
						fileBaseName: "Student_Enrollment"
					},
					mssql: {
						query: "SELECT  ext.StudentEnrollment.* FROM   (ext.StudentBase         LEFT JOIN ext.AddressContact                ON ext.StudentBase.studentuniqueidentifier =                   ext.AddressContact.studentuniqueidentifier)        LEFT JOIN ext.StudentEnrollment               ON ext.StudentBase.studentuniqueidentifier =                  ext.StudentEnrollment.studentuniqueidentifier WHERE  (           (              ext.StudentEnrollment.entrydate IN (                SELECT Max(entrydate)                FROM ext.StudentEnrollment SE                WHERE ext.StudentEnrollment.studentuniqueidentifier = SE.studentuniqueidentifier              )            )          AND ( ( ext.AddressContact.addresstypecode ) = 'primary1'                 OR ( ext.AddressContact.addresstypecode ) IS NULL )          AND ( ( ext.StudentEnrollment.enrollmentstatus ) = 'a' ) )          and ext.StudentBase.schoolCode='<!schoolCode!>';"
					}
				}
			}
		],
		"fieldList": Student_Enrolled_File_FieldList,
		"assembler": {
			"expressbook": { //captured by dictionary.js, and instance of the named assembler is created with the params which are specific to that assembler
				name: 'pseudoSql', //'pseudoSql', //note: this refers to an assembler in the dataAccess module package. Could refer to a fully qualified path to an assembler elsewhere.
				params: {
					finalProcess: processForStudents
				}
			}
		}
	},

	"Schedule": {
		componentSchemaList: [			{
				schemaName: "Section_Student",
				accessInfo: {
					file: {
						fileBaseName: "Section_Student"
					},
					mssql: {
						query: " SELECT ext.SectionStudent.* FROM ext.SectionStudent INNER JOIN ext.SectionStaff ON ext.SectionStudent.coursenumber = ext.SectionStaff.coursenumber AND ext.SectionStudent.sectionnumber = ext.SectionStaff.sectionnumber INNER JOIN ext.Section ON ext.SectionStudent.sectionnumber = ext.Section.sectionnumber AND ext.SectionStudent.coursenumber = ext.Section.coursenumber INNER JOIN ext.Course ON ext.SectionStudent.coursenumber = ext.Course.coursenumber where ext.SectionStudent.schoolCode='<!schoolCode!>';"
					}
				}
			},
			{
				schemaName: "Section_Staff",
				accessInfo: {
					file: {
						fileBaseName: "Section_Staff"
					},
					mssql: {
						query: " SELECT ext.SectionStaff.* FROM ext.SectionStudent INNER JOIN ext.SectionStaff ON ext.SectionStudent.coursenumber = ext.SectionStaff.coursenumber AND ext.SectionStudent.sectionnumber = ext.SectionStaff.sectionnumber INNER JOIN ext.Section ON ext.SectionStudent.sectionnumber = ext.Section.sectionnumber AND ext.SectionStudent.coursenumber = ext.Section.coursenumber INNER JOIN ext.Course ON ext.SectionStudent.coursenumber = ext.Course.coursenumber where ext.SectionStudent.schoolCode='<!schoolCode!>';"
					}
				}
			},
			{
				schemaName: "Section",
				accessInfo: {
					file: {
						fileBaseName: "Section"
					},
					mssql: {
						query: " SELECT ext.Section.* FROM ext.SectionStudent INNER JOIN ext.SectionStaff ON ext.SectionStudent.coursenumber = ext.SectionStaff.coursenumber AND ext.SectionStudent.sectionnumber = ext.SectionStaff.sectionnumber INNER JOIN ext.Section ON ext.SectionStudent.sectionnumber = ext.Section.sectionnumber AND ext.SectionStudent.coursenumber = ext.Section.coursenumber INNER JOIN ext.Course ON ext.SectionStudent.coursenumber = ext.Course.coursenumber where ext.SectionStudent.schoolCode='<!schoolCode!>';"
					}
				}
			},
			{
				schemaName: "Course",
				accessInfo: {
					file: {
						fileBaseName: "Course"
					},
					mssql: {
						query: " SELECT ext.Course.* FROM ext.SectionStudent INNER JOIN ext.SectionStaff ON ext.SectionStudent.coursenumber = ext.SectionStaff.coursenumber AND ext.SectionStudent.sectionnumber = ext.SectionStaff.sectionnumber INNER JOIN ext.Section ON ext.SectionStudent.sectionnumber = ext.Section.sectionnumber AND ext.SectionStudent.coursenumber = ext.Section.coursenumber INNER JOIN ext.Course ON ext.SectionStudent.coursenumber = ext.Course.coursenumber where ext.SectionStudent.schoolCode='<!schoolCode!>';"
					}
				}
			}],
		"fieldList": Schedule_File_FieldList,
		"assembler": {
			"expressbook": { //captured by dictionary.js, and instance of the named assembler is created with the params which are specific to that assembler
				name: 'pseudoSql', //note: this refers to an assembler in the dataAccess module package. Could refer to a fully qualified path to an assembler elsewhere.
				params: {
					finalProcess: processForSchedule
				}
			}
		}
	},

	"Guardian": {
		componentSchemaList: [
			{
				schemaName: "Address_Contact",
				accessInfo: {
					file: {
						fileBaseName: "Address_Contact"
					},
					mssql: {
						query: "select * from ext.AddressContact where LEN(ext.AddressContact.LocalStudentIdentifier)>3 and ext.SectionStudent.schoolCode='<!schoolCode!>';"
					}
				}
			}
		],
		"fieldList": Guardian_File_FieldList,
		"assembler": {
			"expressbook": { //captured by dictionary.js, and instance of the named assembler is created with the params which are specific to that assembler
				name: 'pseudoSql', //note: this refers to an assembler in the dataAccess module package. Could refer to a fully qualified path to an assembler elsewhere.
				params: {
					finalProcess: processForGuardians
				}
			}
		}
	},
	

	"Address_Contact":
	{
		unfinished: true,
		"schemaName": "Address_Contact_File",
		fileName: "Address_Contact_File",
		"fieldList": Address_Contact_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Address_Contact_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Course":
	{
		unfinished: true,
		"schemaName": "Course_File",
		fileName: "Course_File",
		"fieldList": Course_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Course_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"User_Base":
	{
		unfinished: true,
		"schemaName": "User_Base_File",
		fileName: "User_Base_File",
		"fieldList": User_Base_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(User_Base_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Lookups":
	{
		unfinished: true,
		"schemaName": "Lookups",
		fileName: "Lookups",
		"fieldList": Lookups_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Lookups_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Section":
	{
		"schemaName": "Section_File",
		fileName: "Section_File",
		"fieldList": Section_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Section_File_FieldList)
		},

		"translation": {
			"expressbook": {}
		}
	},

	"Section_Staff":
	{
		"schemaName": "Section_Staff_File",
		fileName: "Section_Staff_File",
		"fieldList": Section_Staff_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Section_Staff_File_FieldList)
		},
		"translation": {
			"expressbook": {
			}
		}
	},

	"Section_Student":
	{
		"schemaName": "Section_Student_File",
		fileName: "Section_Student_File",
		"fieldList": Section_Student_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Section_Student_File_FieldList)
		},
		"translation": {
			"expressbook": {
			}
		}
	},

	"Student_Attendance":
	{
		unfinished: true,
		"schemaName": "Student_Attendance_File",
		fileName: "Student_Attendance_File",
		"fieldList": Student_Attendance_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Student_Attendance_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Student_Base":
	{
		"schemaName": "Student_Base_File",
		"fileName": "Student_Base_File",
		"fieldList": Student_Base_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Student_Base_File_FieldList)
		},
		"translation": {
			"expressbook": {
			}
		}
	},

	"Student_Discipline":
	{
		unfinished: true,
		"schemaName": "Student_Discipline_File",
		fileName: "Student_Discipline_File",
		"fieldList": Student_Discipline_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Student_Discipline_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Student_Enrollment":
	{
		unfinished: true,
		"schemaName": "Student_Enrollment_File",
		fileName: "Student_Enrollment_File",
		"fieldList": Student_Enrollment_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Student_Enrollment_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Student_gpa":
	{
		unfinished: true,
		"schemaName": "Student_gpa_File",
		fileName: "Student_gpa_File",
		"fieldList": Student_gpa_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Student_gpa_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Student_gradeLevels":
	{
		unfinished: true,
		"schemaName": "Student_gradeLevels_File",
		fileName: "Student_gradeLevels_File",
		"fieldList": Student_gradeLevels_File_FieldList,
		"maps": {
			"expressbook": processPassThroughUnchanged(Student_gradeLevels_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	}
};









