'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'req',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//PRIVATE FUNCTIONS ====================================


	var isAllowed = function(name, value) {
		var allowed = self.profileData.dataAccess.allowed[name] ? self.profileData.dataAccess.allowed[name] : [],
			disallowed = self.profileData.dataAccess.disallowed[name] ? self.profileData.dataAccess.disallowed[name] : [],
			result = false;

		if ((qtools.isEmpty(allowed) || allowed.indexOf(value) > -1) &&
			(qtools.isEmpty(disallowed) || disallowed.indexOf(value) < 0)) {
			result = true;
		}
		return result;

	}

	var getProfile = function(authData) {

		var dataFileDirectory = global.localEnvironment.get('dataFileDirectory'),
			clientProfileList = {};

		clientProfileList.jmcClient1 = {
			id: self.id,
			dataSourceAvailable: { //turns into dataSource:, after api setup
				uff:
				{
					type: 'file',
					location: dataFileDirectory + global.localEnvironment.temporaryClientDirectory,
					fileExtension: 'txt',
					definitionName: 'passThroughDefinition', //refers to a file in dataDefinitions
					schemaSourceNameMapping: {
						Course: '',
						User_Base: 'JMC_User_File',
						Section: '',
						Section_Staff: '',
						Section_Student: '',
						Student_Attendance: '',
						Student_Base: '',
						Student_Discipline: '',
						Student_Enrollment: '',
						Student_GPA: '',
						Student_Grades: ''
					},
					receivingSchema: 'expressbook'
				}
			},
			dataAccessAvailable: { //turns into dataAccess:, after api setup
				uff:
				{
					allowed: {
						//if property is not defined, that implies 'all', if ID is in both, disallowed prevails
						//if any are allowed, any not on list are NOT allowed
						//			districts:['blbany'],
						//			schools:['010', '099'],
						segments: []
					},
					disallowed: {
						districts: [],
						//	schools: ['030', '099'],
						//segments: ['Student_Grades_File']
					},
					isAllowed: isAllowed
				}
			}
		}


		self.profileData = qtools.extend(clientProfileList[authData.validId], authData);


	}

	var executeAuthorization = function() {


		var callback = function(authData) {
			self.emit('authComplete', authData);
		}

		pretendExternalCall(self.req.some_credential_part_TBD, callback);
	}


	//TESTING STUBB ====================================
	var pretendExternalCall = function(credentials, callback) {
		var authData = function() {
			return {
				status: 1,
				validId: 'jmcClient1'
			};
		}();
		//			var authData=function(){return {status:-1, reason:'bad credentials'};}();

		callback(authData);
	};

	//METHODS AND PROPERTIES ====================================

	this.auth = function() {
		self.on('authComplete', function(authData) {
			if (authData.status) {
				getProfile(authData), self.emit('validAuth');
			} else {
				self.errorResultData = authData; self.emit('badAuth');
			}
		});

		executeAuthorization();
	};

	this.errorResult = function() {
		return self.errorResultData;
	};

	this.setApi = function(api) {
		self.profileData.dataAccess = self.profileData.dataAccessAvailable[api.name];
		self.profileData.dataSource = self.profileData.dataSourceAvailable[api.name];
		self.profileData.dataSource.api = api;
		//if (!dataAccess || !dataSource){ self.emit('lateBadAuth'); //or something
	}


	this.profile = function() {
		return self.profileData;
	};



	//INITIALIZATION ====================================

	this.args = args;

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;









