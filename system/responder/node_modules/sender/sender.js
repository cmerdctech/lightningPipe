'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: []
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

self.transferPacket=require("transferPacket");
self.transferPacket=new(self.transferPacket);



this.generateSender = function(tableName, res, req) {

		return function(err, result) {

// delete result.meta;
// qtools.dump({'\n\n===== result =====\n':result});

			//closure: tableName from generate()
			if (!err) {
		
				var finishedObject=result.result;

				self.transferPacket.reset()
					.add('Data', finishedObject)
					.add('Status', 1);

			}
			else{

				self.transferPacket.reset()
					.add('Error', err.result)
					.add('Status', -1);
			
			}
				var meta=err?err.meta:result.meta;
				if (global.localEnvironment.get('sendMetaData')) {
					self.transferPacket.add('Meta', meta)
					.add('Meta', {
						body: req.body,
						query: req.query
					});
				}

				res.json(self.transferPacket.finishedObject());
		}
	};

	//INITIALIZATION ====================================

	

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;