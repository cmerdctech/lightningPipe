'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'uriPath',
				optional: false
			},
			{
				name: 'clientProfile',
				optional: false
			},
			{
				name: 'uriParser',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================


	var convertData = function(accessData, mainCallback) {
		mainCallback('', {
			data: accessData,
			meta: "from convertData() stubb"
		});
	}

	//METHODS AND PROPERTIES ====================================



	this.getData = function() {
		switch (self.clientProfile.dataSource.type) {
			case 'file':
				var fileAccessor = require("uffFileAccessor");
				break;
			case 'mssql':
				qtools.die("add self.clientProfile.dataSource.loginParameters to clientProfile");
				//var fileAccessor = require("mssqlFileAccessor");
				break;
		}


		fileAccessor = new fileAccessor({
			queryInfo: self.queryInfo,
			clientProfile: self.clientProfile,
			validUriSegmentNames: self.uriParser.getValidSegmentNames()
		});

		self.on('getDataComplete', function(accessResult) {
			if (accessResult.status > 0) {

				qtools.mergeMetaData(accessResult.meta);

				convertData(accessResult.data, function(err, conversionResult) {

					if (!err) {
						self.emit('gotData', {
							result: conversionResult.data,
							meta: qtools.mergeMetaData(conversionResult.meta)
						});
					} else {
						self.emit('badData', {
							result: err.data,
							meta: qtools.mergeMetaData(conversionResult.meta)
						});

					}

				});


			} else {
				self.emit('badData', {
					result: accessResult.data,
					meta: qtools.getMetaData()
				});
			}
		});

		self.uriParser.checkQuery(function(err, result) {
			if (err) {
				var error = {
				status: -1,
				data: err.data,
				meta: qtools.mergeMetaData(err.meta)
			};

				self.emit('getDataComplete', error);
				return false;

			} else {

				fileAccessor
					.getRawData(function(result) {
					self.emit('getDataComplete', result);
				});

			}
		});
	};

	//INITIALIZATION ====================================

	this.queryInfo = this.uriParser.parse(this.uriPath);

	qtools.addMetaData('queryInfo', this.queryInfo);

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;









