'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'req',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//PRIVATE FUNCTIONS ====================================

	this.getProfile = function(authData) {

		var dataFileDirectory = global.localEnvironment.get('dataFileDirectory'),
			clientProfileList = {};

		clientProfileList.jmcClient1 = {
			id: self.id,
			dataSource: {
				type: 'file',
				location: dataFileDirectory + '/jmcClient1/',
				fileExtension: 'txt',
				definitionName: 'passThroughDefinition',
				schemaSourceNameMapping: {
					AddressContact: 'AddressContact',
					Course: 'Course',
					Section: 'Section',
					SectionStaff: 'SectionStaff',
					SectionStudent: 'SectionStudent',
					StudentAttendance: 'StudentAttendance',
					StudentBase: 'StudentBase',
					StudentDiscipline: 'StudentDiscipline',
					StudentEnrollment: 'StudentEnrollment',
					StudentGPA: 'StudentGPA',
					StudentGrades: 'StudentGrades'
				}
			},
			receivingSchema: 'expressbook',
			dataAccess:{
			allowed:{ 
			//if property is not defined, that implies 'all', if ID is in both, disallowed prevails
			//if any are allowed, any not on list are not allowed
	//			districts:['albany'],
	//			schools:['010', '099'],
				files:[]
			},
			disallowed:{
				districts:[],
		//		schools:['030', '099'],
				files:[]
			}
			}
		}

		self.profileData = qtools.extend(clientProfileList[authData.validId], authData);

	}

	var executeAuthorization = function() {


		var callback = function(authData) {
			self.emit('authComplete', authData);
		}

		pretendExternalCall(self.req.some_credential_part_TBD, callback);
	}


	//TESTING STUBB ====================================
	var pretendExternalCall = function(credentials, callback) {
		var authData = function() {
			return {
				status: 1,
				validId: 'jmcClient1'
			};
		}();
		//			var authData=function(){return {status:-1, reason:'bad credentials'};}();

		callback(authData);
	};

	//METHODS AND PROPERTIES ====================================

	this.auth = function() {
		self.on('authComplete', function(authData) {
			if (authData.status) {
				self.getProfile(authData), self.emit('validAuth');
			} else {
				self.errorResultData = authData; self.emit('badAuth');
			}
		});

		executeAuthorization();
	};

	this.errorResult = function() {
		return self.errorResultData;
	};

	this.profile = function() {
		return self.profileData;
	};


	//INITIALIZATION ====================================

	this.args = args;

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;



