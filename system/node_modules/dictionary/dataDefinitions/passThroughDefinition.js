'use strict';
var qtools = require('qtools');
qtools = new qtools(this);

var schoolFieldList = ["District", "District Type", "School Code", "School Name", "SchoolMinimumGrade", "SchoolMaximumGrade", "SchoolLevelName", "SchoolAreaName", "SuperintendentLastName", "SuperintendentFirstName", "SuperintendentMiddleName", "AreaSuperintendentLastName", "AreaSuperintendentFirstName", "AreaSuperintendentMiddleName", "PrincipalLastName", "PrincipalFirstName", "PrincipalMiddleName", "SchoolPrimaryPhone", "SchoolAlternatePhone", "SchoolFaxNumber", "AddressLine1", "AddressLine2", "AddressLine3", "City Name", "CountyName", "StateCode", "StateName", "ZipCode"]
var termFieldList = ["SchoolYear", "SchoolNumber", "Term Description", "StartDate", "EndDate", "TermType", "Term Number"];

var synthSeq = 0;
var syntheticSequenceNumber = function(itemObj, sourceItem) {
	return synthSeq++;
}

var teacherUffFieldList = ["DistrictCode", "Filler2", "StaffUniqueIdentifier",
	"SchoolYearBeg", "SchoolYearEnd", "EmployeeID",
	"LocalStaffCode", "State School/PlantNumber",
	"LastName", "MiddleName", "FirstName", "FullName",
	"JobCode1", "JobCode2", "JobCode3", "JobCode4", "Phone",
	"Email", "Department1", "Department2", "Department3",
	"Department4", "Status", "PrimaryLocationFlag", "Login Name",
	"Password", "Default Password"];

var homeroomUffFieldList = ["DistrictCode", "DistrictType", "SchoolCode",
	"SectionNumber", "CourseNumber", "TermAbbrev",
	"SchoolYearBeg", "SchoolYearEnd", "Grade", "BeginDate",
	"EndDate", "Location", "HomeroomFlag", "BegPeriodNum",
	"EndPeriodNum", "Credit", "TeamCode", "Track"];
var assignStudentUffFieldList = ["DistrictCode", "DistrictType", "SchoolCode",
	"StudentUniqueIdentifier", "StateStudentNumber",
	"LocalStudentNumber", "SchoolYearBeg", "SchoolYearEnd",
	"SectionNumber", "CourseNumber", "GradeLevel",
	"EntryDate", "WithdrawalDate", "EntryType",
	"Withdrawaltype"];
var assignTeacherUffFieldList = ["DistrictCode", "DistrictType", "SchoolCode",
	"StaffUniqueIdentifier", "LocalStaffCode",
	"SchoolYearBeg", "SchoolYearEnd", "SectionNumber",
	"CourseNumber", "Grade", "PrimaryInstructorFlag",
	"LastName", "MiddleName", "FirstName"];
var studentUffFieldList = ["DistrictCode", "DistrictType", "SchoolCode",
	"SchoolYearBegin", "SchoolYearEnd",
	"StudentUniqueIdentifier", "StateStudentNumber",
	"LocalStudentNumber", "GradeLevel", "Graduation Year",
	"Student Status", "LastName", "MiddleName", "FirstName",
	"Suffix", "Prefix", "FullName", "PreferredName",
	"LastSchoolAttended", "Concurrent Enrollment",
	"BirthDate", "Self Guardian Flag", "Gender", "SSN",
	"BirthPlace", "BirthState", "BirthCountry",
	"EthnicityCode"];
var gradeLevelUffFieldList = ["SchoolID",
	"Grade",
	"Grade Description",
	"School Year Begin",
	"School Year End"];


var Address_Contact_File_FieldList = ["DistrictCode", "DistrictType", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "StaffUniqueIdentifier", "SchoolCode", "AddressTypeCode", "Address1", "Address2", "Address3", "City", "StateName", "StateCode", "ZipCode", "CountyCode", "CountyName", "ContactCode", "ContactLegalCode", "ContactExtraMailingCode", "ContactSequence#", "ContactFirstName", "ContactMiddleName", "ContactLastName", "ContactFullName", "ContactPhone1", "ContactPhone2", "ContactPhone3", "Phone1Type", "Phone2Type", "Phone3Type", "ContactEMail"];
var Course_File_FieldList = ["DistrictCode", "DistrictType", "SchoolCode", "CourseNumber", "SchoolYearBeg", "SchoolYearEnd", "CourseDesc", "CourseAbbrev", "SubjectArea/Department", "Credit", "GradeMinimum", "GradeMaximum"];
var User_Base_File_FieldList = ["DistrictCode", "Filler2", "StaffUniqueIdentifier", "SchoolYearBeg", "SchoolYearEnd", "EmployeeID", "LocalStaffCode", "State School/PlantNumber", "LastName", "MiddleName", "FirstName", "FullName", "JobCode1", "JobCode2", "JobCode3", "JobCode4", "Phone", "Email", "Department1", "Department2", "Department3", "Department4", "Status", "PrimaryLocationFlag", "Login Name", "Password", "Default Password"];
var Lookups_FieldList = [];
var Section_File_FieldList = ["DistrictCode", "DistrictType", "SchoolCode", "SectionNumber", "CourseNumber", "TermAbbrev", "SchoolYearBeg", "SchoolYearEnd", "Grade", "BeginDate", "EndDate", "Location", "HomeroomFlag", "BegPeriodNum", "EndPeriodNum", "Credit", "TeamCode", "Track"];
var Section_Staff_File_FieldList = ["DistrictCode", "DistrictType", "SchoolCode", "StaffUniqueIdentifier", "LocalStaffCode", "SchoolYearBeg", "SchoolYearEnd", "SectionNumber", "CourseNumber", "Grade", "PrimaryInstructorFlag", "LastName", "MiddleName", "FirstName"];
var Section_Student_File_FieldList = ["DistrictCode", "DistrictType", "SchoolCode", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "SchoolYearBeg", "SchoolYearEnd", "SectionNumber", "CourseNumber", "GradeLevel", "EntryDate", "WithdrawalDate", "EntryType", "Withdrawaltype"];
var StudentBaseTest2_FieldList = [];
var Student_Attendance_File_FieldList = ["DistrictCode", "DistrictType", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "SchoolYearBeg", "SchoolYearEnd", "SchoolCode", "Attendance Time Unit", "Term Abbrev", "Attendance Category", "Attendance Type", "AttendanceCode", "AttendanceDate", "PeriodCode", "TimeIn", "TimeOut", "Note"];
var Student_Base_File_FieldList = ["DistrictCode", "DistrictType", "SchoolCode", "SchoolYearBegin", "SchoolYearEnd", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "GradeLevel", "Graduation Year", "Student Status", "LastName", "MiddleName", "FirstName", "Suffix", "Prefix", "FullName", "PreferredName", "LastSchoolAttended", "Concurrent Enrollment", "BirthDate", "Self Guardian Flag", "Gender", "SSN", "BirthPlace", "BirthState", "BirthCountry", "EthnicityCode"];
var Student_Discipline_File_FieldList = ["DistrictCode", "DistrictType", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "SchoolYearBeg", "SchoolYearEnd", "SchoolCode", "Discipline Time Unit", "Term Abbrev", "Discipline Category", "DisciplineCode", "DisciplineDate", "DispositionCode", "DispositionBeginDate", "DispositionEndDate", "Note"];

var Student_Enrollment_File_FieldList = ["DistrictCode", "DistrictType", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "SchoolCode", "SchoolYearBeg", "SchoolYearEnd", "GradeLevel", "EntryDate", "WithdrawalDate", "EntryTypeCode", "WithdrawalTypeCode", "StudentResidentDistrictCode", "StudentResidentDIstrictType", "StudentResidentSchoolCode", "StateAidCategory", "LastLocationofAttendance", "PercentEnrolled", "AttendanceDays", "MembershipDays", "PostSecondaryOption", "PSEOHighSchoolParticipationHrs  ", "HomeBoundServiceIndicator", "SpecialEducationEvaluationStatus", "SpecialEdInstructionalSetting", "LEP", "LEPBeginDate", "Gifted&TalentedParticipation", "Gender", "EthnicityCode", "BirthDate", "HomePrimaryLanguage", "PrimaryDisability", "TransportationCategory", "EconomicIndicator", "MigrantIndicator", "StudentTitle1Indicator", "HomelessStudentFlag", "TransportingDistrictCode", "TransportingDistrictType", "WardofStateFlag", "IndependentStudyFlag", "SupplementalEducationServices", "SpecialEnrollmentCode", "PrimarySchoolFlag", "SpecEd Flag", "504 Flag", "Track", "TeamCode", "Promotion Status", "Program of Study", "Enrollment Status", "Filler", "Filler ", "Filler", "Filler", "Filler", "Filler", "AdvisorID/Name", "Filler", "ELLServiceLevel", "Hispanic-Latino", "American Indian Alaska Native", "Asian", "Black-African American", "Native Hawaiian-Pacific Islander", "White", "First US School Entry Date", "New to Country Flag", "Filler ", "Next Year School"];

var Student_GPA_File_FieldList = ["DistrictCode", "DistrictType", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "CreditsEarned", "SchoolYearBegin", "SchoolYearEnd", "GPA1", "GPA2", "SchoolLevelName", "Program of Study"];
var Student_Grades_File_FieldList = ["DistrictCode", "DistrictType", "StudentUniqueIdentifier", "StateStudentNumber", "LocalStudentNumber", "CourseCode", "TermCode", "SubjectArea/Department", "GradeLevel", "CreditsEarned", "CreditsAttempted", "GradeMark", "SchoolYearBegin", "SchoolYearEnd", "SchoolCode", "CourseDesc", "SectionNumber", "TeacherName"];


var Student_Enrolled_File_FieldList = ["Student_Base.DistrictCode", "Student_Base.DistrictType", "Student_Base.SchoolCode", "Student_Base.SchoolYearBegin", "Student_Base.Expr1", "Student_Enrollment.Next Year School", "Student_Base.StudentUniqueIdentifier", "Student_Base.Gender", "Student_Base.StateStudentNumber", "Student_Enrollment.GradeLevel", "Student_Base.Graduation Year", "Student_Base.Student Status", "Student_Base.LastName", "Student_Base.FirstName", "Student_Base.MiddleName", "Address_Contact.Address1", "Address_Contact.Address2", "Address_Contact.City", "Address_Contact.StateCode", "Address_Contact.ZipCode", "Address_Contact.ContactPhone1", "Address_Contact.ContactPhone2", "Address_Contact.ContactPhone3", "Student_Enrollment.StudentResidentDistrictCode", "Student_Enrollment.StudentResidentDIstrictType", "Student_Base.HRTeacher", "Student_Base.CounselorID", "Student_Base.SSN", "Student_Base.EthnicityCode", "Student_Enrollment.HomePrimaryLanguage", "Student_Base.PrimaryLanguage", "Student_Enrollment.StateAidCategory", "Student_Base.LastSchoolAttended", "Student_Base.Concurrent Enrollment", "Student_Base.BirthDate", "Student_Base.Self Guardian Flag", "Student_Enrollment.WardofStateFlag", "Student_Enrollment.SpecEd Flag", "Student_Enrollment.SpecialEducationEvaluationStatus", "Student_Enrollment.SpecialEdInstructionalSetting", "Student_Enrollment.PrimaryDisability", "Student_Enrollment.[504 Flag]", "Student_Enrollment.StudentTitle1Indicator", "Student_Enrollment.LEP", "Student_Enrollment.EconomicIndicator", "Student_Enrollment.Gifted&TalentedParticipation", "Student_Enrollment.MigrantIndicator", "Student_Enrollment.Promotion Status", "Student_Base.TYAbsencesEx", "Student_Base.TYAbsencesUn", "Student_Base.TYISS", "Student_Base.TYOSS", "Student_Base.TLYPromotionStatus", "Student_Base.LYAbsencesEx", "Student_Base.LYAbsencesUn", "Student_Base.LYISS", "Student_Base.LYOSS", "Student_Base.GPA", "Student_Base.Credits", "Student_Enrollment.Program of Study"];
var Schedule_File_FieldList = ["Section_Student.DistrictCode",
	"Section_Student.DistrictType",
	"Section_Student.SchoolCode",
	"Section_Student.StudentUniqueIdentifier",
	"Section_Staff.StaffUniqueIdentifier",
	"Section_Student.CourseNumber",
	"Section_Student.SectionNumber",
	"Section.TermAbbrev",
	"Section_Student.SchoolYearBeg",
	"Section.BegPeriodNum",
	"Section.EndPeriodNum",
	"Course.CourseAbbrev",
	"Course.SubjectArea/Department"];

var Guardian_File_FieldList = ["Address_Contact.DistrictCode", "Address_Contact.DistrictType", "Address_Contact.StudentUniqueIdentifier", "Address_Contact.SchoolCode", "Address_Contact.GuardianType", "Address_Contact.Guardseq", "Address_Contact.ContactLastName", "Address_Contact.ContactFirstName", "Address_Contact.ContactMiddleName", "Address_Contact.ContactFullName", "Address_Contact.Address1", "Address_Contact.Address2", "Address_Contact.City", "Address_Contact.StateCode", "Address_Contact.ZipCode", "Address_Contact.ContactPhone1", "Address_Contact.ContactPhone2", "Address_Contact.ContactPhone3", "Address_Contact.Relationship", "Address_Contact.LegalGuard", "Address_Contact.OtherGuardian", "Address_Contact.ParentStatus", "Address_Contact.EmailAddress"];

var passThroughDefinition = function(fieldList) {
	var list = [],
		outObj = {};
	for (var i = 0, len = fieldList.length; i < len; i++) {
		var element = fieldList[i]; //.toCamelCase(' ', true);
		outObj[element] = element;
	}
	return outObj;
}

var processForStudents = function(sqlizer) {
	//NOTE: this is called from an assembler. "this" refers to the assembler's scope.

	var tables = sqlizer.tables;

	sqlizer.reset({
		SE1: qtools.clone(tables.Student_Enrollment),
		SE2: qtools.clone(tables.Student_Enrollment)
	});

	sqlizer.setBaseTable('SE1');
	sqlizer.leftJoin('StateStudentNumber', 'SE2', 'StateStudentNumber');

	sqlizer.indexWorkingTable('SE1.StateStudentNumber');


	sqlizer.summarize('maxEntryDate', 'SE1.StateStudentNumber', function(recordSet) {
		var maxDate;

		for (var i = 0, len = recordSet.length; i < len; i++) {
			var element = recordSet[i];
			if (!maxDate) {
				maxDate = element.SE2.EntryDate;
			} else if (maxDate < element.SE2.EntryDate) {
				maxDate = element.SE2.EntryDate;
			}

			return {
				StudentUniqueIdentifier: element.SE1.StudentUniqueIdentifier,
				StateStudentNumber: element.SE1.StateStudentNumber,
				EntryDate: maxDate
			};
		}
	});

	var maxEntryDateTable = sqlizer.getSpecialTable('summaryTables', 'maxEntryDate');

	sqlizer.reset(tables);
	sqlizer.addTable('maxEntryDate', maxEntryDateTable);


	sqlizer.removeDupes('Student_Base');
	sqlizer.removeDupes('Student_Enrollment');

	sqlizer.setBaseTable('Student_Base');

	sqlizer.index('Address_Contact', 'StudentUniqueIdentifier');
	sqlizer.index('Student_Enrollment', 'StudentUniqueIdentifier');

	sqlizer.leftJoin('StudentUniqueIdentifier', 'Address_Contact', 'StudentUniqueIdentifier');
	sqlizer.leftJoin('StudentUniqueIdentifier', 'Student_Enrollment', 'StudentUniqueIdentifier');
	sqlizer.leftJoin('StateStudentNumber', 'maxEntryDate', 'StateStudentNumber');

	sqlizer.mapColumns({
		"Student_Base.Expr1": function(record) {
			var value = record.Student_Enrollment.StudentResidentSchoolCode;

			if (value == '000') {
				value = "";
			}

			return value;
		},
		"Student_Base.StudentUniqueIdentifier": function(record) {
			var value = record.Student_Base.LocalStudentNumber.substr(3)
			return value;
		},
		"Student_Enrollment.Next Year School": function() {
			return "";
		},
		"Student_Base.HRTeacher": function() {
			return "";
		},
		"Student_Base.CounselorID": function() {
			return "";
		},
		"Student_Base.PrimaryLanguage": function() {
			return "";
		},
		"Student_Base.TYAbsencesEx": function() {
			return "";
		},
		"Student_Base.TYAbsencesUn": function() {
			return "";
		},
		"Student_Base.TYISS": function() {
			return "";
		},
		"Student_Base.TYOSS": function() {
			return "";
		},
		"Student_Base.TLYPromotionStatus": function() {
			return "";
		},
		"Student_Base.LYAbsencesEx": function() {
			return "";
		},
		"Student_Base.LYAbsencesUn": function() {
			return "";
		},
		"Student_Base.LYISS": function() {
			return "";
		},
		"Student_Base.LYOSS": function() {
			return "";
		},
		"Student_Base.GPA": function() {
			return "";
		},
		"Student_Base.Credits": function() {
			return "";
		}
	});
	
	var bethSelector = function(record) {

		var selected = record.Student_Enrollment.EntryDate == record.maxEntryDate.EntryDate
		&&
		(
		(
		record.Address_Contact || record.Address_Contact.AddressTypeCode ||
		(record.Address_Contact && record.Address_Contact.AddressTypeCode && record.Address_Contact.AddressTypeCode.toLowerCase() == "primary1")
		)
		&&
		(
		record.Student_Enrollment && record.Student_Enrollment['Enrollment Status'] &&
		record.Student_Enrollment['Enrollment Status'].toLowerCase() == "a"
		)

		)
		return selected;

	};

	sqlizer.select(bethSelector)

	var result = sqlizer.getResult();

	return result;
}

var processForSchedule = function(sqlizer) {
	//NOTE: this is called from an assembler. "this" refers to the assembler's scope.

	sqlizer.setBaseTable('Section_Student');

	sqlizer.mapColumns({

		"Section_Student.StudentUniqueIdentifier": function(record) {
			var value = record.Section_Student.LocalStudentNumber.substr(3);
			return value;
		}
	});

	sqlizer.innerJoin('CourseNumber', 'Section_Staff', 'CourseNumber');
	sqlizer.innerJoin('SectionNumber', 'Section_Staff', 'SectionNumber');

	sqlizer.innerJoin('CourseNumber', 'Section', 'CourseNumber');
	sqlizer.innerJoin('SectionNumber', 'Section', 'SectionNumber');

	sqlizer.innerJoin('CourseNumber', 'Course', 'CourseNumber');


	var result = sqlizer.getResult();

	return result;


}

var processForGuardians = function(sqlizer) {
	//NOTE: this is called from an assembler. "this" refers to the assembler's scope.

	sqlizer.setBaseTable('Address_Contact');

	sqlizer.mapColumns({
		"Address_Contact.GuardianType": function(record) {
			return 'l';
		},
		"Address_Contact.Relationship": function(record) {
			var contactCode = record.Address_Contact.ContactCode,
				addressTypeCodeString = record.Address_Contact.AddressTypeCode.substr(0, 7).toLowerCase(),
				value = contactCode;

			contactCode = contactCode.trim();
			;

			if (!contactCode) {
				value = addressTypeCodeString == 'primary' ? 'parent/guardian' : contactCode;
			}


			return value;
		},

		"Address_Contact.StudentUniqueIdentifier": function(record) {
			var value = record.Address_Contact.LocalStudentNumber.substr(3)


			return value;
		},

		"Address_Contact.Guardseq": function(record) {
			var value = record.Address_Contact.AddressTypeCode.substr(record.Address_Contact.AddressTypeCode.length - 1, 1)

			return value;
		},

		"Address_Contact.LegalGuard": function(record) {
			var addressTypeCodeString = record.Address_Contact.AddressTypeCode.substr(0, 7).toLowerCase(),
				value = addressTypeCodeString == 'primary' ? 'y' : 'n';

			return value;
		},
		"Address_Contact.OtherGuardian": function(record) {
			return '';
		},
		"Address_Contact.ParentStatus": function(record) {
			return '';
		},
		"Address_Contact.EmailAddress": function(record) {
			return '';
		}
	});



	sqlizer.select(function(record) {
		var LocalStudentNumber = record.Address_Contact.LocalStudentNumber;
		if (LocalStudentNumber.toString().length > 3) { //access string indexes are one based
			return true;
		}
		//else
		return false;

	})

	var result = sqlizer.getResult();

	return result;


}

module.exports = {


	//NOTE: maps property are "sourceFileFieldName":"targetJsonPropertyName". Empty map, {}, emits entire fieldlist.
	//ALSO: translations are executed *after* maps are set. Their format is: "targetJsonPropertyName": function
	//Translations are 1) the only way to use a source field twice, and
	//2) the only way to *create* a field that does not map to a source field
	//return '<!omitProperty!>'; will remove the property entirely

	//[doc1] - MN SIS Extract Files - Unified_V9(In Progress)
	//[doc2] - Plans4.x Import File Formats
	//[doc3] - DWextractLayout




	"teacher": //[doc1-User Base File]
	{
		"schemaName": "UserBase",
		"fieldList": teacherUffFieldList,
		"maps": {
			"expressbook": passThroughDefinition(teacherUffFieldList)
		},

		"translation": {
			"expressbook": {
				"Active": function(itemObj, sourceItem) {
					if (sourceItem.Status === 'A') {
						return 1;
					} else {
						return 0;
					}
				},

				"LDAP": function(itemObj, sourceItem) {
					return 0;
				},

				"UserName": function(itemObj, sourceItem) {
					if (sourceItem["Login Name"]) {
						return sourceItem["Login Name"];
					} else {
						return sourceItem["EmployeeID"];
					}
				},

				"Password": function(itemObj, sourceItem) {
					if (sourceItem["Login Name"]) {
						return sourceItem["Password"];
					} else {
						return 'test';
					}
				}
			}
		}
	},

	"Student_Enrolled": {
		componentSchemaList: [
			"Student_Base",
			"Address_Contact",
			"Student_Enrollment"
		],
		"fieldList": Student_Enrolled_File_FieldList,
		"assembler": {
			"expressbook": {
				name: 'pseudoSql', //note: this refers to an assembler in the dataAccess module package. Could refer to a fully qualified path to an assembler elsewhere.
				params: {
					finalProcess: processForStudents
				}
			}
		}
	},


	"Schedule": {
		componentSchemaList: [
			"Section_Student",
			"Section_Staff",
			"Section",
			"Course"
		],
		"fieldList": Schedule_File_FieldList,
		"assembler": {
			"expressbook": {
				name: 'pseudoSql', //note: this refers to an assembler in the dataAccess module package. Could refer to a fully qualified path to an assembler elsewhere.
				params: {
					finalProcess: processForSchedule
				}
			}
		}
	},

	"Guardian": {
		componentSchemaList: [
			"Address_Contact"
		],
		"fieldList": Guardian_File_FieldList,
		"assembler": {
			"expressbook": {
				name: 'pseudoSql', //note: this refers to an assembler in the dataAccess module package. Could refer to a fully qualified path to an assembler elsewhere.
				params: {
					finalProcess: processForGuardians
				}
			}
		}
	},

	"Address_Contact":
	{
		unfinished: true,
		"schemaName": "Address_Contact_File",
		fileName: "Address_Contact_File",
		"fieldList": Address_Contact_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Address_Contact_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},

	"Course":
	{
		unfinished: true,
		"schemaName": "Course_File",
		fileName: "Course_File",
		"fieldList": Course_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Course_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},




	"User_Base":
	{
		unfinished: true,
		"schemaName": "User_Base_File",
		fileName: "User_Base_File",
		"fieldList": User_Base_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(User_Base_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},




	"Lookups":
	{
		unfinished: true,
		"schemaName": "Lookups",
		fileName: "Lookups",
		"fieldList": Lookups_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Lookups_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},




	"Section":
	{
		"schemaName": "Section_File",
		fileName: "Section_File",
		"fieldList": homeroomUffFieldList,
		"maps": {
			"expressbook": passThroughDefinition(homeroomUffFieldList)
		},

		"translation": {
			"expressbook": {}
		}
	},




	"Section_Staff":
	{
		"schemaName": "Section_Staff_File",
		fileName: "Section_Staff_File",
		"fieldList": assignTeacherUffFieldList,
		"maps": {
			"expressbook": passThroughDefinition(assignTeacherUffFieldList)
		},
		"translation": {
			"expressbook": {
			}
		}
	},




	"Section_Student":
	{
		"schemaName": "Section_Student_File",
		fileName: "Section_Student_File",
		"fieldList": assignStudentUffFieldList,
		"maps": {
			"expressbook": passThroughDefinition(assignStudentUffFieldList)
		},
		"translation": {
			"expressbook": {
			}
		}
	},




	"StudentBaseTest2":
	{
		"schemaName": "StudentBase",
		"fileName": "StudentBaseTest2",
		"fieldList": studentUffFieldList,
		"maps": {
			"expressbook": passThroughDefinition(studentUffFieldList)
		},
		"translation": {
			"expressbook": {
			}
		}
	},




	"Student_Attendance":
	{
		unfinished: true,
		"schemaName": "Student_Attendance_File",
		fileName: "Student_Attendance_File",
		"fieldList": Student_Attendance_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Student_Attendance_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},




	"Student_Base":
	{
		"schemaName": "Student_Base_File",
		"fileName": "Student_Base_File",
		"fieldList": studentUffFieldList,
		"maps": {
			"expressbook": passThroughDefinition(studentUffFieldList)
		},
		"translation": {
			"expressbook": {
			}
		}
	},




	"Student_Discipline":
	{
		unfinished: true,
		"schemaName": "Student_Discipline_File",
		fileName: "Student_Discipline_File",
		"fieldList": Student_Discipline_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Student_Discipline_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},




	"Student_Enrollment":
	{
		unfinished: true,
		"schemaName": "Student_Enrollment_File",
		fileName: "Student_Enrollment_File",
		"fieldList": Student_Enrollment_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Student_Enrollment_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},




	"Student_GPA":
	{
		unfinished: true,
		"schemaName": "Student_GPA_File",
		fileName: "Student_GPA_File",
		"fieldList": Student_GPA_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Student_GPA_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	},




	"Student_Grades":
	{
		unfinished: true,
		"schemaName": "Student_Grades_File",
		fileName: "Student_Grades_File",
		"fieldList": Student_Grades_File_FieldList,
		"maps": {
			"expressbook": passThroughDefinition(Student_Grades_File_FieldList)
		},
		"translation": {
			"expressbook": {}
		}
	}
};









