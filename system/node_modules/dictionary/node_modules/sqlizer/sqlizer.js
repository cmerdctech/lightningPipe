'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'tables',
				optional: true
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================



	//METHODS AND PROPERTIES ====================================
	this.indexes = {};
	this.workingTable = [];
	this.baseTableName = '';
	this.duplicates={};

	this.removeDupes = function(tableName) {
		var outList = [],
			uniqueTokenList = {};
		for (var i = 0, len = this.tables[tableName].length; i < len; i++) {
			var element = this.tables[tableName][i],

				uniqueToken = qtools.hash(element);

			if (!uniqueTokenList[uniqueToken]) {
				uniqueTokenList[uniqueToken] = true;
				outList.push(element);
			} else {
				if (!this.duplicates[tableName]) {this.duplicates[tableName]=[]; }
				this.duplicates[tableName].push(element);
			}

		}

		// console.log('this.tables[tableName]='+this.tables[tableName].length+'\n');
		// console.log('outList='+outList.length+'\n');

		this.tables[tableName] = outList;
	}

	this.setBaseTable = function(tableName) {
		this.baseTableName = tableName;

		for (var i = 0, len = this.tables[tableName].length; i < len; i++) {
			var element = this.tables[tableName][i];

			var recordObject = {};
			recordObject[tableName] = element;
			this.workingTable.push(recordObject);
		}
	}

	this.index = function(tableName, propertyName) {
		var newIndex = {},
			table = this.tables[tableName];

		for (var i = 0, len = table.length; i < len; i++) {
			var element = table[i];

			newIndex[element[propertyName]] = element;
		}

		if (typeof (this.indexes[tableName]) == 'undefined') {
			this.indexes[tableName] = {};
		}

		this.indexes[tableName][propertyName] = newIndex;

	}



	this.leftJoin = function(linkColumn, targetTableName, targetLinkColumn) {
		var index = this.indexes[targetTableName][targetLinkColumn];

		for (var i = 0, len = this.workingTable.length; i < len; i++) {
			var element = this.workingTable[i][this.baseTableName][linkColumn];
			this.workingTable[i][targetTableName] = index[element];
		}
	}
	
	this.mapColumns=function(map){
		
	for (var i=0, len=this.workingTable.length; i<len; i++){
		var element=this.workingTable[i];
		
		for (var fieldPath in map){
			var mappingFunc=map[fieldPath],
			newValue=mappingFunc(element);
			
			qtools.putSurePath(element, fieldPath, newValue);
			
			
		}

	}
	}

	this.select = function(selectorFunction) {
		var outList = [];
		for (var i = 0, len = this.workingTable.length; i < len; i++) {
			var element = this.workingTable[i];
			if (selectorFunction(element)) {
				outList.push(element);
			}
		}

		this.workingTable=outList;
	}
	
	this.getResult=function(){
		return this.workingTable;
	}

	//INITIALIZATION ====================================


	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;
