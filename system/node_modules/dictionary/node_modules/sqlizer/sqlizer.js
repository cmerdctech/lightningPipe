'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'tables',
				optional: true
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================



	//METHODS AND PROPERTIES ====================================
	this.reset = function(tables) {
		this.tables = tables;
		self.indexes = {};
		self.workingTable = [];
		self.baseTableName = '';
		self.duplicates = {};
		this.summaryTables={};
	}

	this.removeDupes = function(tableName) {
		var outList = [],
			uniqueTokenList = {};
		for (var i = 0, len = this.tables[tableName].length; i < len; i++) {
			var element = this.tables[tableName][i],

				uniqueToken = qtools.hash(element);

			if (!uniqueTokenList[uniqueToken]) {
				uniqueTokenList[uniqueToken] = true;
				outList.push(element);
			} else {
				if (!this.duplicates[tableName]) {
					this.duplicates[tableName] = [];
				}
				this.duplicates[tableName].push(element);
			}

		}

		this.tables[tableName] = outList;
	}

	this.setBaseTable = function(tableName) {
		this.baseTableName = tableName;


		if (global.localEnvironment.testServer && !this.tables[tableName]) {
			qtools.message("SQLizer Invalid tableName: " + tableName + " does not exist");
		}
		if (global.localEnvironment.testServer) {
			qtools.message("SQLizer Base Table " + tableName + " has " + this.tables[tableName].length + " records");
		}

		for (var i = 0, len = this.tables[tableName].length; i < len; i++) {
			var element = this.tables[tableName][i];

			var recordObject = {};
			recordObject[tableName] = element;
			this.workingTable.push(recordObject);
		}
	}

	this.index = function(tableName, propertyName) {
		var newIndex = {},
			table = (tableName == 'workingTable') ? this.workingTable : this.tables[tableName];

		//console.log('tableName='+tableName+'\n');

		for (var i = 0, len = table.length; i < len; i++) {
			var element = table[i];
			var indexElementName = qtools.getSurePath(element, propertyName);

			if (typeof (newIndex[indexElementName]) == 'undefined') {
				newIndex[indexElementName] = [];
			}

			// if (tableName=='workingTable'){
			// console.log('SE1:'+element.SE1.StateStudentNumber+'/'+element.SE1.EntryDate+' SE2:'+element.SE2.StateStudentNumber+'/'+element.SE2.EntryDate+'\n');
			// 
			// }

			if (this.debug && tableName == 'SE2') {
				console.log('SE2:' + element.StateStudentNumber + '/' + element.EntryDate + '\n');

			}
			newIndex[indexElementName].push(element);

			if (this.debug && tableName == 'workingTable' && indexElementName == '0213002019014') {



				console.log('index()- newIndex[0213002019014]=' + newIndex['0213002019014'][0].SE1.EntryDate + ' / ' + (newIndex['0213002019014'][1] ? newIndex['0213002019014'][1].SE2.EntryDate : 'X') + '\n');

			}

		}

		if (typeof (this.indexes[tableName]) == 'undefined') {
			this.indexes[tableName] = {};
		}


		this.indexes[tableName][propertyName] = newIndex;



		if (this.debug && tableName == 'SE2') {

			console.log('this.indexes[' + tableName + '][' + propertyName + '][0213002019014]=' + this.indexes[tableName][propertyName]['0213002019014'][0].EntryDate + ' / ' + (this.indexes[tableName][propertyName]['0213002019014'][1] ? this.indexes[tableName][propertyName]['0213002019014'][1].EntryDate : 'X') + '\n');

		}
	}


	this.indexWorkingTable = function(propertyName) {
	this.debug=true;
		this.index('workingTable', propertyName);
		this.debug=false;

	}




	this.summarize = function(summaryName, indexName, selector) {
		var indexTable = this.indexes.workingTable[indexName],
			summaryTable={};

		for (var i in indexTable) {
			var element = indexTable[i];
			summaryTable[i]=selector(element);
		}
		
		this.summaryTables[summaryName]=summaryTable;
	}
	
	
	
	
	

	this.getSpecialTable=function(categoryName, tableName){
		return this[categoryName][tableName];
	}
	
	this.addTable=function(tableName, inTable){
		this.tables[tableName]=inTable;
	}



	this.leftJoin = function(linkColumn, targetTableName, targetLinkColumn) {

		if (!self.indexes[targetTableName] || !self.indexes[targetTableName][targetLinkColumn]) {
			self.index(targetTableName, targetLinkColumn);
		}

		self.index(this.baseTableName, targetLinkColumn);

		var index = this.indexes[targetTableName][targetLinkColumn],
			resultTable = [];

		// console.log('targetTableName='+targetTableName+'\n');
		// console.log('this.indexes['+targetTableName+']['+targetLinkColumn+'][0213002019014]='+this.indexes[targetTableName][targetLinkColumn]['0213002019014'][0].EntryDate+' / '+(this.indexes[targetTableName][targetLinkColumn]['0213002019014'][1]?this.indexes[targetTableName][targetLinkColumn]['0213002019014'][1].EntryDate:'X')+'\n');


		for (var i = 0, len = this.workingTable.length; i < len; i++) {

			var element = this.workingTable[i][this.baseTableName][linkColumn];


// if (this.debug && this.workingTable[i][this.baseTableName].StateStudentNumber=='0213002019014'){
// console.log('AA working: '+this.workingTable[i][this.baseTableName].StateStudentNumber+' / '+this.workingTable[i][this.baseTableName].EntryDate+'\n');
// console.log(targetTableName+' gets index['+element+'][*].EntryDate='+index[element][0].EntryDate+' / '+index[element][1].EntryDate+'\n');
// }

			this.workingTable[i][targetTableName] = index[element];


			if (typeof (index[element]) == 'undefined') {
				var newRecord = {};
				newRecord = this.workingTable[i];
				newRecord[targetTableName] = {};
				resultTable.push(newRecord)
			} else {
				for (var j = 0, len2 = index[element].length; j < len2; j++) {
					var matchingRecords = index[element],
						newRecord = {};
					newRecord = this.workingTable[i];
					newRecord[targetTableName] = index[element][j];



					if (this.workingTable[i][this.baseTableName].StateStudentNumber == '0213002019014') {

						console.log('leftJoin- SE1:' + newRecord.SE1.StateStudentNumber + '/' + newRecord.SE1.EntryDate + ' SE2:' + newRecord.SE2.StateStudentNumber + '/' + newRecord.SE2.EntryDate + '\n');
					}

					resultTable.push(newRecord);
				}
			}



		}

		this.workingTable = resultTable;

	}

	this.innerJoin = function(linkColumn, targetTableName, targetLinkColumn) {

		if (!self.indexes[targetTableName] || !self.indexes[targetTableName][targetLinkColumn]) {
			self.index(targetTableName, targetLinkColumn);
		}

		var index = this.indexes[targetTableName][targetLinkColumn],
			outList = [],
			currInx;

		for (var i = 0, len = this.workingTable.length; i < len; i++) {
			var element = this.workingTable[i][this.baseTableName][linkColumn];
			if (index[element]) {
				outList.push(this.workingTable[i]
				);
				currInx = outList.length - 1;
				outList[currInx][targetTableName] = index[element];
			}

		}

		this.workingTable = outList;

	}

	this.mapColumns = function(map) {

		for (var i = 0, len = this.workingTable.length; i < len; i++) {
			var element = this.workingTable[i];

			for (var fieldPath in map) {
				var mappingFunc = map[fieldPath],
					newValue = mappingFunc(element);

				qtools.putSurePath(element, fieldPath, newValue);


			}

		}
	}

	this.select = function(selectorFunction) {
		var outList = [];
		for (var i = 0, len = this.workingTable.length; i < len; i++) {
			var element = this.workingTable[i];
			if (selectorFunction(element)) {
				outList.push(element);
			}
		}

		this.workingTable = outList;
	}

	this.getResult = function() {
		if (global.localEnvironment.testServer) {
			qtools.message("SQLizer Result: " + this.workingTable.length + " records");
		}
		return this.workingTable;
	}

	//INITIALIZATION ====================================

	this.reset(this.tables);

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;








