'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	// 	qtools.validateProperties({
	// 		subject: args,
	// 		targetScope: this, //will add listed items to targetScope
	// 		propList: [
	// 			{
	// 				name: 'placeholder',
	// 				optional: true
	// 			}
	// 		]
	// 	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================
	var mapGenerator=require('../lib/uffRemapNames.js');
	var mappingTable = new mapGenerator().mappingTable;


// 	var tableNameMap={
// 		AddressContact:'ext.exContact',
// 		Course:'ext.exCourse',
// 		UserBase:'ext.exUserBase',
// 		Section:'ext.exSection',
// 		SectionStaff:'ext.exSectionStaff',
// 		SectionStudent:'ext.exSectionStudent',
// 		StudentAttendance:'ext.exStudentAttendance',
// 		StudentBase:'ext.exStudentBase',
// 		StudentDiscipline:'ext.exStudentDiscipline',
// 		StudentEnrollment:'ext.exStudentEnrollment',
// 		StudentGpa:'ext.exStudentGPA',
// 		StudentGradeLevels:'ext.exStudentGrades'
// 	}

	var tableNameMap={
		AddressContact:'ext.AddressContact',
		Course:'ext.Course',
		UserBase:'ext.UserBase',
		Section:'ext.Section',
		SectionStaff:'ext.SectionStaff',
		SectionStudent:'ext.SectionStudent',
		StudentAttendance:'ext.StudentAttendance',
		StudentBase:'ext.StudentBase',
		StudentDiscipline:'ext.StudentDiscipline',
		StudentEnrollment:'ext.StudentEnrollment',
		StudentGpa:'ext.StudentGPA',
		StudentGradeLevels:'ext.StudentGrades',
		
		Address_Contact:'ext.AddressContact',
	//	Course:'ext.Course',
		User_Base:'ext.UserBase',
	//	Section:'ext.Section',
		Section_Staff:'ext.SectionStaff',
		Section_Student:'ext.SectionStudent',
		Student_Attendance:'ext.StudentAttendance',
		Student_Base:'ext.StudentBase',
		Student_Discipline:'ext.StudentDiscipline',
		Student_Enrollment:'ext.StudentEnrollment',
		Student_gpa:'ext.StudentGPA',
		Student_gradeLevels:'ext.StudentGrades'
	}

	//METHODS AND PROPERTIES ====================================

	this.mapDistrictAccessName = function(dictionaryName) {
		return "SSI_XDI_" + dictionaryName;
	}

	this.mapSegmentAccessName = function(dictionaryName) {
		var mapResult=tableNameMap[dictionaryName];
		
		if (typeof(mapResult)!='undefined'){
			return mapResult;
		}
		else{
			return dictionaryName;
		}
	}
	
	this.mapQueryNames=function(query){
		return qtools.templateReplace({template:query, replaceObject:tableNameMap});
	}


	this.mapFieldNames = function(inData, stripNulls) {
		var outObj = {};
		for (var i in inData) {
			var element = inData[i],
				replacement = mappingTable[i];

			if (stripNulls && (element && element.toLowerCase() == 'null') || qtools.toType(element) == 'null') {
				element = '';
			}

			if (typeof (replacement) != 'undefined') {
				outObj[replacement] = element;
			} else {
				outObj[replacement] = element;
			}
		}
		return outObj;
	}

	this.mapFieldNamesList = function(inArray, stripNulls) {
		stripNulls = (typeof (stripNulls) == 'undefined') ? false : stripNulls;
		var outArray = [];
		for (var i = 0, len = inArray.length; i < len; i++) {
			var element = inArray[i];
			outArray.push(this.mapFieldNames(element, stripNulls));
		}
		return outArray;
	}


	this.serverType = 'mssql'; //could be 'file' 'mysql' or 'postgresql' or ...? //maps to something in the dictionary.definition

	//INITIALIZATION ====================================

	this.converterName = '';


	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;








